

library(tidyverse)
library(plyr)


rm(list=ls())
###############################
###read loc and outlier info###
###############################

loc <- read.table("chrom_pos_rowID/ersn.chrom.pos.rowID.list")
colnames(loc) <- c("locus","chrom","pos")

#read outlier info from Fst-based approaches

bs <- read.table("bayescan_output/po1000/ersn_bayescan_outliers.txt", header=T) %>% 
  pull(x)
arl <- read.table("arlequin_output/ersn.arlequin.outliers.txt",header=T) %>% 
  pull(x)
ofk <- read.table("outflank_output/ersn.outflank.outliers.txt",header=T) %>% 
  pull(x)
pc <- read.table("pcadapt_output/ersn.pcadapt.ol.txt",header=T) %>% 
  pull(x)


###read outlier info from env-based approaches
rda <- read.table("rda_prda_output/ersn.rda.ind.snp.candidates.txt",header=T) %>% 
  pull(snp)
lfmm <- read.table("lfmm_output/ersn.lfmm.05.snp.cadidates.K1.txt",header=T) %>% 
  pull(SNP)

bf <- readRDS("bayenv_bfs/env_PCs/ersn/median/ersn.median.outlier.rds")
bf
bf <- bf$env_PC2
bf

#combine
loc <- loc %>% 
  mutate(bs=locus %in% bs) %>% 
  mutate(arl=locus %in% arl) %>% 
  mutate(ofk=locus %in% ofk) %>% 
  mutate(pcadapt=locus %in% pc) %>% 
  mutate(rda =locus %in% rda) %>% 
  mutate(lfmm=locus %in% lfmm) %>% 
  mutate(bf = locus %in% bf)

summary(loc)
head(loc)

loc[loc=="TRUE"]=1
loc[loc=="FALSE"]=0
head(loc)


#####################################
#add popstat, af and maf, mac info###
#####################################

###popstat###
gen <- read.genepop("./genepop_files/ersn.noclone.G50.l90.G60.l70.G70.l50.mac3.recode.singleton.KH.gen", ncode=3L )
p=read.table("pop_info/popmap_filtered_ersn.txt",header=TRUE)
colnames(p)=c("sample","pop")
summary(p)

s.keep <- indNames(gen) #to get the list of individuals
table(s.keep == p$sample)
pop(gen)=p$pop
nPop(gen)
popNames(gen)

bs <- basic.stats(gen)

ff=bs$perloc
ff$snp=rownames(ff)
head(ff)


###maf, mac###
maf <- read.table("./maf/ersn.frq", header=T, row.names = NULL)
head(maf)
mac <- read.table("./maf/ersn.frq.count",header=T, row.names=NULL)
head(mac)

colnames(maf) <- c("chrom","pos","n_alleles","total_counts","maf_r","maf")
colnames(mac) <- c("chrom","pos","n_alleles","total_counts","mac_r","mac")

head(maf)
head(mac)
mafc <- left_join(maf, mac, by=c("chrom", "pos"))
mafc <- mafc %>% 
  select(chrom, pos, maf, mac)


mafc$chrom=as.numeric(mafc$chrom)

###af by pop###
#convert genind to genpop
gen.pop <- genind2genpop(gen)
gen.pop

pop.freq <- makefreq(gen.pop, missing="mean")
dim(pop.freq) #rows as pops, columns as alleles

pop.freq.ref <- pop.freq[,seq(1,ncol(pop.freq),2)]
pop.freq.ref[,1:6]
colnames(pop.freq.ref) <- loc$locus
pop.freq.ref[,1:6]

pop.freq.ref.t <- t(pop.freq.ref)
head(pop.freq.ref.t)
pop.freq.ref.t <- as.data.frame(pop.freq.ref.t)
pop.freq.ref.t$snp <- rownames(pop.freq.ref.t)
head(pop.freq.ref.t)



###############################
###combine all info together###
###############################
dim(loc)
dim(ff)
dim(mafc)
dim(pop.freq.ref.t)


head(loc)
head(ff)
loc.sum <- left_join(loc,ff,by=c("locus"="snp"))

head(loc.sum)
head(mafc)
loc.sum <- left_join(loc.sum, mafc, by=c("chrom","pos"))


head(loc.sum)
head(pop.freq.ref.t)
loc.sum <- left_join(loc.sum, pop.freq.ref.t, by=c("locus"="snp"))

head(loc.sum)
dim(loc.sum)

##################################################################
##take SNPs that identified by at least 2 methods as candidates###
##################################################################
cand <- loc.sum %>% 
  mutate(ol.tot=rowSums(select(.,bs:bf))) %>% 
  filter(ol.tot>1) 
dim(cand)


#check the stats and make sure there is no candidate with weird stats
summary(cand)



write.csv(cand, "./outliers_summary/ersn.ol.candidates.2methods.csv", row.names = F)
write.csv(loc.sum, "./outliers_summary/ersn.loc.outlier.summary.csv", row.names = F)


###################################################
###seperate for Fst-based and env-based outliers###
###################################################

rm(list=ls())
loc.sum <- read.csv("outliers_summary/ersn.loc.outlier.summary.csv",header=T)


loc.sum %>% 
  filter(bs>0) %>% 
  dim()

loc.sum %>% 
  mutate(ol.tot=rowSums(select(.,bs:bf))) %>% 
  filter(ol.tot>1) %>% 
  dim()

neu <- loc.sum %>% 
  mutate(ol.tot=rowSums(select(.,bs:bf))) %>% 
  filter(ol.tot==0) 


fst <- loc.sum %>% 
  mutate(fstol.tot=rowSums(select(.,bs:pcadapt))) %>% 
  filter(fstol.tot>1)

env <- loc.sum %>% 
  mutate(envol.tot=rowSums(select(.,rda:bf))) %>% 
  filter(envol.tot>1)

fst_env <- loc.sum %>% 
  mutate(fstol.tot=rowSums(select(.,bs:pcadapt))) %>% 
  mutate(envol.tot=rowSums(select(.,rda:bf))) %>% 
  filter(fstol.tot > 0 & envol.tot > 0)

write.csv(neu, "./outliers_summary/ersn.neutral.Nonemethods.csv",row.names = F)
write.csv(fst, "./outliers_summary/ersn.fstol.candidates.2methods.csv", row.names = F)
write.csv(env, "./outliers_summary/ersn.envol.candidates.2methods.csv", row.names = F)
write.csv(fst_env, "./outliers_summary/ersn.fst_env.candidates,2methods.csv", row.names = F)


#####################################
###prepare whitelist for vcftools####
#####################################

fst.list <- fst %>% 
  select(chrom,pos)

env.list <- env %>% 
  select(chrom, pos)

neu.list <- neu %>% 
  select(chrom, pos)

write.table(neu.list, "./outliers_summary/ersn.neutral.list", quote=F, row.names = F, sep="\t")
write.table(fst.list, "./outliers_summary/ersn.fstol.candidates.list", quote=F, row.names = F, sep="\t")
write.table(env.list, "./outliers_summary/ersn.envol.candidates.list", quote=F, row.names = F, sep="\t")


cand <- read.csv("./outliers_summary/ersn.ol.candidates.2methods.csv",header=T)
head(cand)
list <- cand %>% 
  select(chrom, pos) 
head(list)

write.table(list,"./outliers_summary/ersn.ol.candidates.list", quote=F, row.names = F, sep="\t")






